<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monster Penguin</title>
    <description>Blog sobre Informática y Programación.</description>
    <link>http://localhost:4000/monsterpenguin/</link>
    <atom:link href="http://localhost:4000/monsterpenguin/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 27 Nov 2017 18:18:38 -0600</pubDate>
    <lastBuildDate>Mon, 27 Nov 2017 18:18:38 -0600</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>Cómo jugar juegos de Gamecube y Wii en GNU/Linux con Dolphin-emu</title>
        <description>&lt;p&gt;El siguiente post cuenta con un screencast (video tutorial):&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/b24uxWMa0g4&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Este post lo he podido elaborar gracias a un amigo, que me ha animado y despertado nuevamente la curiosidad de emular juegos en GNU/Linux y me ha compartido la lista de comandos y dependencias necesarias para la instalación de dos emuladores: &lt;strong&gt;Dolphin y PPSSPP&lt;/strong&gt;, en este post pretendo compartir y guardar los pasos a seguir para la instalación de &lt;strong&gt;Dolphin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;El emulador para juegos de &lt;strong&gt;PSP&lt;/strong&gt; llamado &lt;strong&gt;PPSSPP&lt;/strong&gt; lo dejaré para el próximo post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para los que piensan a estas alturas que GNU/Linux es aburrido o que es un sistema donde no se puede jugar, adivinen que… este post demuestra lo contrario, ya que una vez instalado Dolphin-emu podremos disfrutar de juegos de GameCube y Wii en nuestra computadora :)&lt;/p&gt;

&lt;p&gt;Para los que no conocen Dolphin, este es un emulador open-source para Nintendo GameCube y Wii (además tenemos compatibilidad con &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Virtual_Console&quot;&gt;VC&lt;/a&gt; en la &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Main_Page&quot;&gt;Dolphin Wiki&lt;/a&gt; podemos ver la &lt;strong&gt;Compability list&lt;/strong&gt; en el menú izq).
Dolphin puede ser instalado en Android, Linux, Mac OS X y Windows. Dolphin fue el primer emulador en arrancar juegos de GameCube y Wii, teniendo ahora gran compatibilidad con la mayoría de títulos de estas dos consolas. Con una gran comunidad de desarrolladores y usuarios alrededor del mundo Dolphin continúa ganando compatibilidad, performance y nuevas funcionalidades, al día de hoy Dolphin-Emu se encuentra en su versión 5.&lt;/p&gt;

&lt;div style=&quot;position:relative;height:0;padding-bottom:56.25%&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/KS7Fl30JZcA?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Antes de comenzar con la instalación, les recuerdo que podemos apoyarnos e instalar Dolphin siguiendo las &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Installing_Dolphin&quot;&gt;instrucciones&lt;/a&gt; y la descarga del sitio oficial en su sección de descargas &lt;a href=&quot;https://es.dolphin-emu.org/download/&quot;&gt;aquí&lt;/a&gt;. El método que mostraré a continuación es por medio de un script que descarga y compila el código fuente en su última versión estable.&lt;/p&gt;

&lt;h2 id=&quot;paso-1-instalando-las-dependencias-de-dolphin&quot;&gt;&lt;strong&gt;Paso 1:&lt;/strong&gt; Instalando las dependencias de Dolphin&lt;/h2&gt;
&lt;p&gt;Para distribuciones basadas en Debian, lo primero que haremos será instalar las dependencias de Dolphin con &lt;strong&gt;apt install&lt;/strong&gt; para tener dolphin funcionando en nuestro sistema:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apt install pkg-config gcc libwxbase3.0-dev libwxgtk3.0-dev libgtk2.0-dev libxext-dev libreadline-dev libgl1-mesa-dev libevdev-dev libudev-dev cmake qtbase5-private-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La instalación para usuarios de Ubuntu es simple y en la guia oficial cuentan con un PPA para la instalación con los siguientes comandos:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-add-repository ppa:dolphin-emu/ppa
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt update
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt install dolphin-emu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;paso-2-descargar-y-ejecutar-el-script-de-instalación&quot;&gt;&lt;strong&gt;Paso 2:&lt;/strong&gt; Descargar y ejecutar el script de instalación&lt;/h2&gt;
&lt;p&gt;Para instalar Dolphin desde el código fuente, tenemos un script que lo que hace es descargar el código fuente del repo oficial de Dolphin, compilarlo e instalarlo, este script lo he colgado en mi Github, entonces hacemos lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Clonamos el script que comenzará a descargar, compilar e instalar Dolphin&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/Energy1011/dolphin-emu-installer-sh.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Entramos a la carpeta del repo clonado y damos permisos al script de ejecución&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;dolphin-emu-installer-sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x dolphin-installer.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Ejecutamos el script instalador&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./dolphin-installer.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ahora solo esperamos que el script descargue, compile e instale Dolphin, el tiempo de espera puede variar entre computadoras en la descarga y el proceso de compilación suele tardar, pero una vez finalizado tendremos nuestro Dolphin funcionando y listo para correr los ROMS.&lt;/p&gt;

&lt;h2 id=&quot;-dolphin-soporta-controles-&quot;&gt;¿ Dolphin soporta controles ?&lt;/h2&gt;
&lt;p&gt;Claro que se pueden usar controles usb y bluetooth, incluso he conectado controles de PSP3 a GNU/Linux en otros emuladores, mi amigo también acaba de enlazar su nuevo control de nintendo switch a su pc con emuladores, pronto haré un tutorial sobre controles.&lt;/p&gt;

&lt;h2 id=&quot;-donde-descargamos-roms-&quot;&gt;¿ Donde descargamos ROMS ?&lt;/h2&gt;
&lt;p&gt;Los Roms e ISOs son las imágenes de juegos que podemos descargar y correr en nuestros emuladores, haría falta hacer una búsqueda en tu motor de búsqueda favorito para encontrar diferentes sitios de descarga de juegos, por ejemplo: &lt;a href=&quot;https://www.emuparadise.me/&quot;&gt;https://www.emuparadise.me/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;recomendaciones-y-aclaraciones&quot;&gt;Recomendaciones y aclaraciones&lt;/h2&gt;
&lt;p&gt;Este es un método de instalar Dolphin, existen desde luego otras maneras, de hecho este método lo he realizado sobre una distribución Kali, que si bien funciona, esta no pretende ser una distribución en la que se suelen correr emuladores para juegos por el tema del &lt;strong&gt;root user&lt;/strong&gt; por default y es necesario y recomendado crear un usuario estándar, pero aun así se demuestra la versatilidad de GNU/Linux como sistema.&lt;/p&gt;

&lt;p&gt;Para usuarios de otros sistemas como Windows y Mac tienen los compilados en el sitio oficial en el apartado de descargas de esa página.&lt;/p&gt;

&lt;p&gt;Y para los usuarios de otras distros como Arch, Ubuntu, Fedora pueden visitar el siguiente &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Installing_Dolphin&quot;&gt;enlace&lt;/a&gt; con la guia oficial de instalación de Dolphin.&lt;/p&gt;

&lt;p&gt;Finalmente, espero que disfruten jugar videojuegos por medio de emuladores tanto como yo en su sistema favorito; Antes de terminar el post quiero agradecer a todos los desarrolladores y usuarios que hacen que estos emuladores funcionen, dandonos tantas horas de diversión, incluso de tambien hasta felicidad/nostalgia en el caso de los juegos retros corriendo en nuestros ordenadores, hasta la próxima.&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Nov 2017 14:11:30 -0600</pubDate>
        <link>http://localhost:4000/monsterpenguin/games/linux/tutorial/2017/11/27/como-jugar-juegos-de-gamecube-y-wii-en-gnu-linux-con-dolphin-emu.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/games/linux/tutorial/2017/11/27/como-jugar-juegos-de-gamecube-y-wii-en-gnu-linux-con-dolphin-emu.html</guid>
        
        <category>gamecube</category>
        
        <category>wii</category>
        
        <category>linux</category>
        
        <category>emulator</category>
        
        <category>screeencast</category>
        
        
        <category>games</category>
        
        <category>linux</category>
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Script para crear post en jekyll</title>
        <description>&lt;p&gt;En esta ocasión les traigo un pequeño aporte, &lt;strong&gt;un &lt;a href=&quot;https://github.com/Energy1011/jekyll-tool-sh&quot;&gt;script&lt;/a&gt; para inicializar posts en &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;, los programadores tenemos la costumbre de tratar de automatizar todo, esta no es la excepción y me ha parecido buena idea crear un script para esta tarea. Quiero extender el script con otras funcionalidades, pero por el momento ayudará a inicializar los posts de manera más “interactiva”. Aunque no lo parezca con este tipo de scripts podemos ahorrarnos bastante tiempo de post en post.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;El tiempo es el recurso más valioso.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si bien sabemos, para crear un nuevo post en jekyll es necesario crear un archivo con un nombre como el siguiente:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_post/2017-11-26-título-de-mi-post.md
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;En el que el archivo tiene que empezar con una fecha en el formato: &lt;strong&gt;año-mes-día&lt;/strong&gt;, seguido del título del post en formato markdown. Bien, este archivo debe de estar dentro de la carpeta &lt;strong&gt;post&lt;/strong&gt; esto es necesario para que jekyll lo reconozca como un post y genere el HTML estático dentro de &lt;strong&gt;site&lt;/strong&gt; cuando lanzamos el comando:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Al crear este archivo su primer contenido de cabecera &lt;a href=&quot;https://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt;, tiene que ser algo parecido a lo siguiente en formato YAML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;---
layout: post
title: &quot;Script para crear post en jekyll&quot;
date: 2017-11-26 19:44:48 -06:00
type: post
published: true
status: publish
categories: [jekyll, scripts]
tags: [jekyll, create post, scripts]
author: &quot;Energy1011&quot;
image: &quot;screen-jekyll-tool-1.png&quot;
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este Front Matter YAML lo he generado desde mi script que he llamado &lt;strong&gt;&lt;a href=&quot;https://github.com/Energy1011/jekyll-tool-sh&quot;&gt;jekyll-tool-sh&lt;/a&gt;&lt;/strong&gt; (No me rompí la cabeza pensando en un nombre xD) este script que he realizado lo comparto con todos ustedes en mi &lt;a href=&quot;https://github.com/Energy1011/jekyll-tool-sh&quot;&gt;github aquí&lt;/a&gt;, su función principal por ahora es ahorrarnos el tiempo de copiar el front matter de otros post para después editarlo y lo más importante es que nos lleva de manera interactiva a crearlo como se muestra a continuación:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/monsterpenguin/assets/screen-jekyll-tool-1.png&quot; alt=&quot;Jekyll-tool screenshot 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El script se encarga de crear el archivo para el post, nombrandolo con el formato correcto, y para lanzar el script basta con lanzar el siguiente comando:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/jekyll-tool -c &lt;span class=&quot;s2&quot;&gt;&quot;título de mi post&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La opción ‘-c’ le dice al script que tiene que crear un nuevo post, cuando el script se corre por primera vez nos preguntará datos como:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Author&lt;/li&gt;
  &lt;li&gt;Path completo de nuestra carpeta &lt;strong&gt;post&lt;/strong&gt; para que el script sepa donde inicializarlo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los datos anteriores se guardan en un archivo de configuración como un &lt;a href=&quot;https://energy1011.github.io/monsterpenguin/linux/unix/blog/2017/11/10/que-son-los-dotfiles-y-como-respaldarlos.html&quot;&gt;.dotfile&lt;/a&gt; localizado en &lt;strong&gt;~/.jekyll-tool&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La opción &lt;em&gt;-h&lt;/em&gt; nos muestra información de ayuda.&lt;/p&gt;

&lt;p&gt;El script desde luego tiene licencia GPL, sugerencias de cambios o nuevas funcionalidades y pull request son bien recibidos, ya que el script está muy simple, por el momento este es mi pequeño aporte para todos ustedes, hasta la próxima.&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Nov 2017 19:44:48 -0600</pubDate>
        <link>http://localhost:4000/monsterpenguin/jekyll/scripts/2017/11/26/Script-para-crear-post-en-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/jekyll/scripts/2017/11/26/Script-para-crear-post-en-jekyll.html</guid>
        
        <category>jekyll</category>
        
        <category>create post</category>
        
        <category>scripts</category>
        
        
        <category>jekyll</category>
        
        <category>scripts</category>
        
      </item>
    
      <item>
        <title>Qué son los dotfiles y cómo respaldarlos</title>
        <description>&lt;p&gt;Hace poco más un mes que no escribía en el blog, pero aquí estoy de regreso con un tema básico para cualquier *nix-user, los llamados &lt;strong&gt;Dotfiles&lt;/strong&gt; (archivos de configuración ocultos).&lt;/p&gt;

&lt;h3 id=&quot;-qué-son-los-dotfiles-&quot;&gt;¿ Qué son los dotfiles ?&lt;/h3&gt;

&lt;p&gt;En sistemas unix-like, refiriéndonos a los sistemas basados en unix, digamos: GNU/Linux, MAC OS X, FreeBSD, etc. Sistemas en los que si bien recordamos, los archivos ocultos son definidos e identificados fácilmente por comenzar con un punto (.) ‘dot’ en inglés, por ello en primera instancia ya sabemos que los dotfiles son archivos ocultos en nuestro sistema.&lt;/p&gt;

&lt;h3 id=&quot;-dónde-encuentro-estos-archivos-y-para-qué-sirven-&quot;&gt;¿ Dónde encuentro estos archivos y para qué sirven ?&lt;/h3&gt;

&lt;p&gt;Es común que ciertos programas hagan uso de archivos dotfiles creandolos y poniéndolos en algunas rutas del sistema para contener configuraciones.&lt;/p&gt;

&lt;p&gt;Por mencionar algunos dotfiles célebres (.bashrc en Mac OS X llamado: .bash_profile, .gitignore, .vimrc) este último por ejemplo, tenemos que Vim (mi editor favorito) crea y usa un archivo dotfile llamado &lt;strong&gt;.vimrc&lt;/strong&gt; por default para guardar algunas configuraciones que el usuario puede modificar y agregar nuevas. Los nombres y rutas de los archivos dotfile pueden variar y ser modificados en los programas que hacen uso de ellos, aun así es importante mencionar que muchos archivos dotfile tienen el posfijo ‘rc’ o ‘config’.&lt;/p&gt;

&lt;p&gt;El archivo &lt;strong&gt;.vimrc&lt;/strong&gt; podemos encontrarlo en el directorio home del usuario &lt;strong&gt;~/.vimrc&lt;/strong&gt; en el que &lt;strong&gt;’~/’&lt;/strong&gt; tilde-virgulilla-de-eñe y diagonal se refieren al directorio principal del usuario y &lt;strong&gt;.vimrc&lt;/strong&gt; al archivo dotfile en sí.&lt;/p&gt;

&lt;p&gt;Dentro del archivo dotfile de vim &lt;strong&gt;también llamado archivo de configuración de vim&lt;/strong&gt; podemos encontrar algo parecido a esto:&lt;/p&gt;
&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; URL: http://vim.wikia.com/wiki/Example_vimrc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Authors: http://vim.wikia.com/wiki/Vim_on_Freenode&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Description: A minimal, but feature rich, example .vimrc. If you are a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;              newbie, basing your first .vimrc on this file is a good choice.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;              If you're a more advanced user, building your own .vimrc based&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;              on this file is still a good idea.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Features&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; These options and commands enable some very useful features in Vim, that&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; no user should have to live without.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Set 'nocompatible' to ward off unexpected things that your distro might&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; have made, as well as sanely reset options when re-sourcing .vimrc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nocompatible

&lt;span class=&quot;c&quot;&gt;&quot; Attempt to determine the type of a file based on its name and possibly its&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; contents. Use this to allow intelligent auto-indenting for each filetype,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; and for plugins that are filetype specific.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; indent plugin &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; Enable syntax highlighting&lt;/span&gt;
syntax &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;-el-contenido-de-los-dotfiles-tienen-el-mismo-lenguaje-universal-yo-estructura-&quot;&gt;¿ El contenido de los dotfiles tienen el mismo ‘lenguaje’ universal y/o estructura ?&lt;/h3&gt;
&lt;p&gt;No, el contenido de estos archivos, puede variar entre programas, es decir, cada programa define la sintaxis y cómo leer estos archivos, pero de eso no hay que preocuparnos, si siempre tenemos en mente que los archivos dotfiles a manera genérica/universal buscan definir configuraciones y variables. Por ejemplo, añadiendo la siguiente línea al archivo &lt;strong&gt;.vimrc&lt;/strong&gt; hacemos que vim siempre nos muestre los números de línea de un archivo dentro del editor:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;o también con :&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Me encanta hablar de vim, pero seguir hablando más de vim y su archivo .vimrc va más allá del propósito principal de este post. Les prometo realizar una serie de tutoriales y screencast sobre vim para todos los interesados en el tema.&lt;/p&gt;

&lt;p&gt;Como dije, no hay que preocuparnos, si leemos el apartado de &lt;strong&gt;Description&lt;/strong&gt; del archivo .vimrc anterior, dice:&lt;/p&gt;
&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot; Description: A minimal, but feature rich, example .vimrc. If you are a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;              newbie, basing your first .vimrc on this file is a good choice.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;              If you're a more advanced user, building your own .vimrc based&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;              on this file is still a good idea.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Que es buena idea basarse en ese archivo de configuración para los usuarios novatos y aun así para los más avanzados también sigue siendo buena idea&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pienso que esta pequeña descripción en el fondo promueve y nos invita a la filosofía libre de compartir&lt;/strong&gt;, para así usar y basarnos en archivos dotfiles que otras personas ya han elaborado. Para aprender a modificar dotfiles no solo compartimos sino que también la mayoría de programas que hacen uso de los dotfiles tienen documentación disponible que explica cómo modificarlos y definir configuraciones.&lt;/p&gt;

&lt;h3 id=&quot;respaldando-e-instalando-tus-dotfiles&quot;&gt;Respaldando e “instalando” tus dotfiles&lt;/h3&gt;
&lt;p&gt;Los dotfiles pueden contener muchas configuraciones específicas del usuario, es por ello que regularmente estos se guardan debajo de la carpeta home del usuario, la cantidad de dotfiles dependerá de la cantidad de programas que el usuario tenga y que estos programas por supuesto implementen este tipo de archivos; En lo personal me doy a la tarea de respaldar los siguientes dotfiles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bash (~/.bashrc bash shell)&lt;/li&gt;
  &lt;li&gt;i3wm (~/.i3/config window manager)&lt;/li&gt;
  &lt;li&gt;vim (~/.vimrc editor de texto y código)&lt;/li&gt;
  &lt;li&gt;tmux (terminal multiplexer)&lt;/li&gt;
  &lt;li&gt;vimfx (un legacy plugin de firefox para navegar en modo vim)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para tener nuestros dotfiles resguardados y disponibles en cualquier momento y en cualquier sistema, &lt;strong&gt;alguien tuvo la brillante idea un día de crear un repositorio&lt;/strong&gt; y llevarlo con un CVS como lo es &lt;strong&gt;git&lt;/strong&gt;; Utilizando git entonces podemos guardar las versiones  de nuestros dotfiles y tener estos archivos disponibles para clonarlos como cualquier otro repo e instalarlos en cualquier sistema.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Una guía no-oficial de Github explica y recomienda la creación de repositorios dotfiles &lt;a href=&quot;https://dotfiles.github.io/&quot;&gt;aquí&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mi-repo-dotfile&quot;&gt;Mi Repo Dotfile&lt;/h3&gt;
&lt;p&gt;Como anteriormente mencioné, compartir configuraciones de dotfiles es bueno, ya que puede beneficiarnos a todos. La idea de respaldar e instalar los dotfiles me pareció excelente y de inmediato quise crear mi propio repo y programé dos scripts en bash: &lt;strong&gt;Uno para crear backups&lt;/strong&gt; y otro &lt;strong&gt;para instalarlos (copiarlos)&lt;/strong&gt; de manera automática en sus respectivos directorios; &lt;a href=&quot;https://github.com/Energy1011/dotfiles&quot;&gt;Aquí mi dotfile repo&lt;/a&gt;
&lt;strong&gt;Siéntete libre de clonar mi repo y modificarlo a tu gusto :)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mi repo dotfiles contiene lo siguiente:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;El script que he creado para respaldo, en el que el script pregunta al usuario que dotfiles respaldar:
&lt;a href=&quot;https://github.com/Energy1011/dotfiles/blob/master/backup.sh&quot;&gt;backup.sh&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Para instalar mis dotfiles he creado este otro script que va preguntando al usuario que instalar y que no:
&lt;a href=&quot;https://github.com/Energy1011/dotfiles/blob/master/install.sh&quot;&gt;install.sh&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Y por supuesto: archivos dotfile&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Te invito a modificar mis scripts a tus necesidades o colaborar con un pull request si lo deseas, (por lo pronto un amigo me ha recomendado agregarle a los scripts una opción de (yes to all) para las preguntas de instalación y de respaldo).&lt;/p&gt;

&lt;h3 id=&quot;recapitulando-esta-publicación&quot;&gt;Recapitulando esta publicación&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;En los sistemas operativos unix-like los archivos son nombrados y comienzan con un (.) ‘dot’ en inglés.&lt;/li&gt;
  &lt;li&gt;Los archivos dotfiles son archivos de configuración ocultos utilizados por distintos programas.&lt;/li&gt;
  &lt;li&gt;Estos archivos pueden ser respaldados en repos de git para tenerlos disponibles y hacer uso de ellos desde cualquier sistema.&lt;/li&gt;
  &lt;li&gt;Es buena idea aprender/clonar/crear repos dotfiles, más que nada basarte en otros repositorios para mejorar tus dotfiles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A manera general he explicado los dotfiles en esta publicación y espero esta información sea útil, hasta la próxima.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 02:00:00 -0600</pubDate>
        <link>http://localhost:4000/monsterpenguin/linux/unix/blog/2017/11/10/que-son-los-dotfiles-y-como-respaldarlos.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/linux/unix/blog/2017/11/10/que-son-los-dotfiles-y-como-respaldarlos.html</guid>
        
        <category>dotfiles</category>
        
        <category>unix</category>
        
        
        <category>linux</category>
        
        <category>unix</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Open graph protocol</title>
        <description>&lt;p&gt;En esta ocasión quiero hablarles del Open Graph Protocol, abreviado simplemente como OG u OGP, este protocolo nos permite ofrecer información adicional al compartir contenido como web/enlaces en chats o en redes sociales que implementen este protocolo. OG esta basado en &lt;a href=&quot;https://es.wikipedia.org/wiki/RDFa&quot;&gt;RDFa&lt;/a&gt; y es por eso que hace uso de las &lt;a href=&quot;https://es.wikipedia.org/wiki/Etiqueta_meta&quot;&gt;meta tag HTML&lt;/a&gt; con (meta tags) me refiero a las etiquetas HTML que van dentro del encabezado, como la siguiente:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://una-direccion-de-ejemplo.com/mi-imagen-principal.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Como podemos observar en la meta tag anterior el atributo &lt;strong&gt;property&lt;/strong&gt; tiene una notación haciendo referencia al protocolo OG con &lt;strong&gt;‘og:image’&lt;/strong&gt;. La meta tag del ejemplo anterior indica que la imagen principal para el preview es: mi-imagen-principal.png y es la que será mostrada en el preview al compartir en cualquier medio social que sorporte e implemente el OG.&lt;/p&gt;

&lt;p&gt;OG nos permite mostrar previews como el siguiente (preview de esta misma publicación):&lt;br /&gt;
&lt;img src=&quot;/monsterpenguin/assets/screen-open-graph-preview.png&quot; alt=&quot;Screenshot preview&quot; /&gt;&lt;br /&gt;
Las meta tag con OG ofrecen datos extra a servicios y aplicaciones de manera “oculta” (detras de bambalinas) dentro del código de una pagina web, estos datos en conjunto son información llamada o reconocida como &lt;strong&gt;Social Object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si alguna vez te preguntaste cómo servicios como facebook, twitter, g+, &lt;a href=&quot;https://es.wikipedia.org/wiki/Telegram_Messenger&quot;&gt;telegram&lt;/a&gt;, etc, generan una vista previa del contenido, la respuesta es que &lt;strong&gt;lo hacen por medio de OG&lt;/strong&gt;, y toda esta información es tratada como un objeto social. &lt;strong&gt;Personalmente no estoy de acuerdo con las redes sociales cerradas y &lt;a href=&quot;https://energy1011.github.io/monsterpenguin/linux/2017/09/04/opinion-personal-uso-redes-sociales-cerradas.html&quot;&gt;aquí&lt;/a&gt; hablo al respecto&lt;/strong&gt;. Hay que tomar en cuenta que protocolo OG es implementado en multitud de servicios no solos las redes cerradas y vale la pena saber como funciona.&lt;/p&gt;

&lt;p&gt;Las etiquetas de un objeto social OG basicas son 4:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;og:title&lt;/strong&gt; Titulo del enlace o publicación a mostrar en el preview.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;og:type&lt;/strong&gt; El tipo de objeto compartido, puede ser: website, article, book, profile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;og:description&lt;/strong&gt; Texto que se toma de la publicación para describir su contenido, regularme son las primeras palabras del primer parrafo del contenido del enlace.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;og:image&lt;/strong&gt; Imagen principal a mostrar en el preview, comunmente la imagen de encabezado de un artículo o logo de la página.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existen otros atributos/tags que el OG toma en cuenta y podemos obtener más información &lt;a href=&quot;http://ogp.me/&quot;&gt;aquí&lt;/a&gt;.
En el caso de twitter maneja una notación no estandar y única para su servicio, info &lt;a href=&quot;https://dev.twitter.com/cards/getting-started&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;og-en-jekyll&quot;&gt;OG en Jekyll&lt;/h2&gt;
&lt;p&gt;Ahora que he migrado mi blog a jekyll, me di cuenta que el template en el que me base no tenia una construcción completa de estas meta tags con OG y al parecer muchos repos que sirven para iniciar un blog con jekyll no tienen el código completo necesario para generar las meta tags compatibles con OG, y entonces noté que mis publicaciones en los distintos medios sociales, libres y no libres implementan este protocolo y los previews de mis publicaciones no eran mostrados correctamente y estaban incompletos, pueden revisar como es que he generado estas meta tags para mi blog &lt;a href=&quot;https://github.com/Energy1011/monsterpenguin/blob/master/_includes/head.html&quot;&gt;aquí&lt;/a&gt;, es html con &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;liquid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Las meta tags para twitter tendrían que verse algo parecido a esto:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter:card&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;summary&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter:site&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@flickr&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter:title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Small Island Developing States Photo Submission&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter:description&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;View the album on Flickr.&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter:image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://farm6.staticflickr.com/5510/14338202952_93595258ff_z.jpg&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;El atributo content tiene que ser propio del sitio.&lt;/p&gt;

&lt;p&gt;Hay herramientas como &lt;a href=&quot;https://cards-dev.twitter.com/validator&quot;&gt;twitter validator&lt;/a&gt; para validar como se previsualizaran las OG, ellos al preview la llaman card. Facebook cuenta con validador similar, en lo personal prefiero verificar los previews con el cliente desktop de telegram.&lt;/p&gt;

&lt;p&gt;Por ultimo puedes revisar el código fuente de esta página y ver el resultado final de las meta tags con OG.&lt;/p&gt;

&lt;p&gt;Meta tag generadas por esta publicación, puedes verificarlo viendo su código fuente:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Monster Penguin&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:site_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Open graph protocol&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;article&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:type&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:description&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;En esta ocasión quiero hablarles del Open Graph Protocol, abreviado simplemente como OG u OGP, este protocolo nos permite ofrecer información adicional al co...&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://energy1011.github.io/monsterpenguin/assets/logo-open-graph-protocol.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://energy1011.github.io/linux/2017/09/05/open-graph-protocol.html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;og:url&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Espero esta información sea útil, hasta la próxima.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Sep 2017 03:30:00 -0500</pubDate>
        <link>http://localhost:4000/monsterpenguin/web/blog/2017/09/05/open-graph-protocol.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/web/blog/2017/09/05/open-graph-protocol.html</guid>
        
        <category>html</category>
        
        <category>protocol</category>
        
        
        <category>web</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Opinión personal sobre el uso de redes sociales cerradas para la difusión del software libre</title>
        <description>&lt;p&gt;Personalmente &lt;strong&gt;NO&lt;/strong&gt; estoy de acuerdo con la filosofía de servicios de redes cerradas como facebook, g+, etc. Sin embargo &lt;strong&gt;Sí&lt;/strong&gt; estoy de acuerdo en lo que argumentan algunos difusores de &lt;a href=&quot;https://www.gnu.org/philosophy/free-sw.es.html&quot;&gt;Software libre&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Para poder llegar a más personas y dar a conocer y compartir nuestra filosofía libre hay que ir a donde está la mayoría de la gente actualmente y donde el impacto de difusión sea mayor, nuestra batalla de difusión está ahí.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En lo que &lt;strong&gt;NO&lt;/strong&gt; estoy de acuerdo es que dejemos de usar alternativas libres por creer que es una lucha perdida, hay personas que pierden la lucha porque se desaniman comparando la cantidad de usuarios entre las redes sociales cerradas y las libres, lo mismo pasa con muchos otros servicios.&lt;/p&gt;

&lt;p&gt;Listado de alternativas a varios modos de comunicación y redes sociales:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A Whatapp tenemos &lt;a href=&quot;https://telegram.org/&quot;&gt;Telegram&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A Facebook tenemos &lt;a href=&quot;https://gnu.io/social/try/&quot;&gt;GNU-Social&lt;/a&gt;, &lt;a href=&quot;https://www.joindiaspora.com/&quot;&gt;Diaspora&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A Twitter tenemos &lt;a href=&quot;https://mastodon.social/about&quot;&gt;Mastodon&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A Youtube tenemos &lt;a href=&quot;https://mediagoblin.org/&quot;&gt;MediaGoblin&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y existen más alternativas a las redes sociales y de comunicación a las ya muy trilladas; Por otra parte los sistemas operativos me parecen prioridad para aumentar la cuota de uso de alternativas libres y haré una comparativa en el contexto de los sistemas operativos: Si a GNU/Linux lo hubieran considerado una lucha perdida en sus inicios (cuando tenía pocos usuarios) no tendríamos la oportunidad de disfrutarlo actualmente, y pensemos en la enorme diferencia de cantidad de gente que hoy en día disfruta y usa GNU/Linux, sin duda la diferencia y avance es enorme.&lt;/p&gt;

&lt;p&gt;GNU/Linux hoy en día cuenta con una cantidad impresionante de distribuciones aunque no todas son &lt;a href=&quot;https://www.gnu.org/distros/&quot;&gt;100% distribuciones libres&lt;/a&gt; ellas en general han subido el porcentaje de uso por varias razones:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Se están desarrollando más videojuegos desde la llegada de steam a GNU/Linux (si bien todo lo de steam no es 100 % libre esto trae consigo beneficios y hay que admitir que aumenta la cuota de uso y nos acercamos un poco más a la libertad, por el hecho de usar un OS libre como plataforma).&lt;/li&gt;
  &lt;li&gt;Mejoras importantes en APIs open para gráficas compatibles con GNU/LINUX como &lt;a href=&quot;https://es.wikipedia.org/wiki/Vulkan&quot;&gt;Vulkan&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Las distribuciones cada día se acercan más a ofrecer mejor experiencia de uso a usuarios domésticos, consideremos esto: GNU/Linux a principios de los noventa no contaba con una interfaz que compitiera con lo que desde años antes mac os y windows ya tenían en aquel entonces, GNU/Linux era usado por universitarios expertos y se especializó primeramente por el rumbo de la conquista de servidores, hoy existe variedad de entornos gráficos distintos para GNU/Linux y vaya que son bonitos, son más user-friendly de lo que eran hace años y ya existen &lt;a href=&quot;https://es.wikipedia.org/wiki/Centro_de_software_de_Ubuntu&quot;&gt;Centros de software&lt;/a&gt; (tipo tiendas virtuales para adquirir software) que ayudan a instalar programas a los usuarios de GNU/Linux con un solo click.&lt;/li&gt;
  &lt;li&gt;Se sigue desarrollando y ampliando la compatibilidad de arquitecturas para las distintas CPU, (ya quisiera windows o mac os tener tanto soporte de arquitecturas como las tiene el proyecto &lt;a href=&quot;https://www.debian.org/ports/index.es.html&quot;&gt;Debian/Ports&lt;/a&gt; por ejemplo).&lt;/li&gt;
  &lt;li&gt;Están madurando y desarrollando distintos tipos de aplicaciones y proyectos para cubrir la gran demanda de variedad de software necesario.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Volvamos, hechemos un vistazo a la historia: Empezamos difundiendo un sistema operativo llamado GNU/Linux, y vaya que hemos logrado llegar a muchisima gente (y nos falta mucho camino por recorrer), &lt;a href=&quot;https://energy1011.github.io/monsterpenguin/post/2017/06/07/mitos-de-gnulinux-y-el-software-libre.html&quot;&gt;rompamos los mitos (enlace)&lt;/a&gt;, &lt;a href=&quot;https://energy1011.github.io/monsterpenguin/post/2016/12/29/gnulinux-y-la-libertad.html&quot;&gt;valoremos la libertad (enlace)&lt;/a&gt;, Sigamos difundiendo/apoyando/colaborando con todas las aplicaciones libres y las redes como &lt;a href=&quot;https://gnu.io/social/try/&quot;&gt;GNU-Social&lt;/a&gt;, &lt;a href=&quot;https://mastodon.social/about&quot;&gt;Mastodon&lt;/a&gt; o &lt;a href=&quot;https://www.joindiaspora.com/&quot;&gt;Diaspora&lt;/a&gt; que buscan ofrecer algo distinto. Hago la mención de GNU/Linux como comparativa porque pienso que este mismo fenómeno puede ocurrir en las redes sociales, son y podrán llegar a ser tan buenas como se les siga permitiendo mejorar.&lt;/p&gt;

&lt;p&gt;La buena noticia bajo mi creencia y experiencia es que la principal ventaja del &lt;strong&gt;software libre&lt;/strong&gt; sobre el &lt;strong&gt;software privativo&lt;/strong&gt; es la cantidad de contribuciones de desarrollo, y esto me recuerda a los dichos:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Dos cabezas piensan mejor que una.&lt;/li&gt;
    &lt;li&gt;Divide el trabajo y vencerás.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Con lo anterior quiero decir que multitud de programadores de software libre pueden llegar a aportar y contribuir mucho más que lo que puede costear una empresa de software cerrado en programadores &lt;a href=&quot;https://blog.desdelinux.net/cual-es-la-diferencia-entre-el-software-libre-y-el-software-gratuito/&quot;&gt;(ojo, no es lo mismo libre que gratis)&lt;/a&gt;. En una era donde ya existen &lt;a href=&quot;https://es.wikipedia.org/wiki/CVS&quot;&gt;CVS libres&lt;/a&gt; como git y plataformas que facilitan el desarrollo del software libre (como github, bitbucket, gitlab, etc) y estas se hacen cada vez más usadas y accesibles y la programación se hace al alcance de todos, la velocidad de desarrollo y calidad del software libre se incrementa a pasos agigantados &lt;strong&gt;que los desarrolladores privativos desearían poder alcanzar&lt;/strong&gt;; Es por ello que empresas como microsoft actualmente han optado por liberar código (core .net, visual studio, powershell, etc), cuando nunca fue su intención hacerlo. Entonces los invito a hacer que el software libre se haga presente en todo tipo de aplicación o servicio, sigamos apoyando y difundiendo software libre sin rendirnos en la batalla y la difusión, esto es cuestión de tiempo.&lt;/p&gt;

&lt;h2 id=&quot;conclusión-y-frase-final&quot;&gt;Conclusión y frase final&lt;/h2&gt;
&lt;p&gt;Mi prioridad siempre han sido las alternativas libres; En una sociedad imperfecta como la que tenemos, por decirlo así, quizá la mayoría esperaríamos y quisiéramos un mundo entero como el que plantea el admirable Señor &lt;a href=&quot;https://stallman.org/&quot;&gt;Richard Stallman&lt;/a&gt;, este mundo ideal que aún no existe y no tengo la certeza si podrá existir algún día; Por mi parte seguiré luchando e inclinando la balanza hacia lo que me ofrezca mayor libertad; En mi caso pienso que usar servicios no libres que dañan mi la libertad y comprometen mi privacidad para poder difundir software libre creo que &lt;strong&gt;vale la pena aunque no sea la manera más óptima&lt;/strong&gt; (obviamente con responsabilidad, cuidado y respeto. Las redes sociales llegan a ser peligrosas si no se usan adecuadamente, sean abiertas o cerradas), ya que pienso que no deja de ser una opción para poder atraer gente a que se de cuenta que existe el software libre y que esa misma gente que puede ir cambiando de opinión o cuando menos tener idea de la existencia de la filosofía del SL, recordemos que hay demasiada gente que no tiene ni la más mínima idea de que es el software libre y que la libertad también importa dentro de la informática; Hemos empezado a cambiar, inclinemos el uso a lo libre, dejemos poco a poco lo privativo, hasta alcanzar la mayor libertad posible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aveces no se puede pasar de negro a blanco sin tener que presenciar los grises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nos queda mucho trabajo por hacer y esto lleva tiempo, existen multitud de maneras para contribuir con el software libre y su movimiento:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Difundiendo por cualquier medio.&lt;/li&gt;
  &lt;li&gt;Donando.&lt;/li&gt;
  &lt;li&gt;Programando.&lt;/li&gt;
  &lt;li&gt;Escribiendo material de documentación.&lt;/li&gt;
  &lt;li&gt;Utilizando y probando software libre.&lt;/li&gt;
  &lt;li&gt;Realizando feedbacks y aportando ideas.&lt;/li&gt;
  &lt;li&gt;Traduciendo manuales y software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unete, la información necesaria la podemos encontrar en:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/home.es.html&quot;&gt;https://www.gnu.org/home.es.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fsf.org/es&quot;&gt;https://www.fsf.org/es&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Puedes unirte también a grupos de difusión de Hispano hablantes, por ejemplo en telegram:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://t.me/maratonlinuxero&quot;&gt;https://t.me/maratonlinuxero&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://t.me/GNULinuxGrupo&quot;&gt;https://t.me/GNULinuxGrupo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://t.me/podcastlinux&quot;&gt;https://t.me/podcastlinux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://t.me/gnulinuxmx&quot;&gt;https://t.me/gnulinuxmx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También aquí tengo mi lista de sitios bookmarks interesantes:
&lt;a href=&quot;https://energy1011.github.io/monsterpenguin/bookmarks/&quot;&gt;Mis bookmarks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este blog es libre, puedes clonarlo/modificarlo/distribuirlo desde: &lt;a href=&quot;https://github.com/Energy1011/monsterpenguin&quot;&gt;https://github.com/Energy1011/monsterpenguin&lt;/a&gt;
Los screeencast de este blog son subidos a archive.org: &lt;a href=&quot;https://archive.org/details/@monster_penguin&quot;&gt;https://archive.org/details/@monster_penguin&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Sep 2017 02:00:07 -0500</pubDate>
        <link>http://localhost:4000/monsterpenguin/linux/2017/09/04/opinion-personal-uso-redes-sociales-cerradas.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/linux/2017/09/04/opinion-personal-uso-redes-sociales-cerradas.html</guid>
        
        <category>linux</category>
        
        <category>bash</category>
        
        <category>apt</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Liberando espacio con apt</title>
        <description>&lt;h2 id=&quot;introducción&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;APT (Advanced Packaging Tool) Herramienta Avanzada de Empaquetado es un sistema gestor de paquetes creado por el proyecto Debian. Esta herramienta se encarga de facilitarle al usuario las tareas de instalación y eliminación de programas en los sistemas GNU/Linux (distribuciones derivadas de Debian).&lt;/p&gt;

&lt;p&gt;Esta herramienta se compone de dos programas principalmente:
&lt;strong&gt;apt-get&lt;/strong&gt; y &lt;strong&gt;apt-cache&lt;/strong&gt;, para estos programas podemos encontrar programas frontend, me refiero a programas con una interfaz gráfica que facilita el uso de apt como es Aptitude, Synaptic, Adept, Ubuntu Software Center, etc.&lt;/p&gt;

&lt;p&gt;Apt instala paquetes .deb para los sistemas debian y distribuciones derivadas, instalar un programa con esta herramienta es tan sencillo como escribir:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apt-get install &amp;lt;nombre_del_programa&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Donde &lt;strong&gt;&amp;lt;nombre_del_programa&amp;gt;&lt;/strong&gt; lo sustituimos por el nombre del programa que deseamos instalar.&lt;/p&gt;

&lt;p&gt;Si queremos por ejemplo instalar GIMP, un programa para la manipulación de imágenes, se haría de la siguiente manera:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apt-get install gimp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Sencillo ¿cierto?.&lt;/p&gt;

&lt;h2 id=&quot;comprobando-el-espacio-utilizado&quot;&gt;Comprobando el espacio utilizado&lt;/h2&gt;
&lt;p&gt;Los archivos .deb que apt-get descarga de los repositorios, son almacenados en nuestra máquina antes de comenzar el proceso de instalación, y a veces hace falta hacer limpieza de estos archivos (ojo, al realizar los siguientes 3 pasos para liberar espacio, liberaremos espacio sin &lt;strong&gt;desinstalar&lt;/strong&gt; programas, solo borraremos los instaladores, caché de .deb almacenados localmente); Los archivos son almacenados en la siguiente ruta cuando van a ser instalados &lt;strong&gt;/var/cache/apt/archives&lt;/strong&gt; podemos ver cuánto espacio están utilizando estos archivos en nuestro disco con:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;du -hs /var/cache/apt/archives
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;du&lt;/strong&gt; es un comando que nos permite ver el Disk Usage (espacio utilizado en disco).&lt;/p&gt;
&lt;h2 id=&quot;3-pasos-para-liberar-espacio&quot;&gt;3 Pasos para liberar espacio&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get autoclean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get clean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;explicación-de-los-3-comandos-anteriores&quot;&gt;Explicación de los 3 comandos anteriores&lt;/h3&gt;
&lt;p&gt;1- Para liberar el espacio primero haremos un &lt;strong&gt;autoclean&lt;/strong&gt;, esta opción borra todo el caché de los paquetes .deb de paquetes de versiones anteriores y de los programas que ya han sido instalados en nuestro sistema:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get autoclean
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;2- El siguiente comando con la opción &lt;strong&gt;clean&lt;/strong&gt; borra todos los paquetes .deb, si queremos instalar de nuevo un programa el archivo .deb necesitará ser descargado nuevamente de los repos:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get clean
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;3- Por último el siguiente comando con la opción &lt;strong&gt;autoremove&lt;/strong&gt; borra todos los paquetes dependencias de otros programas:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;comprobando-el-espacio-libre-nuevamente&quot;&gt;Comprobando el espacio libre nuevamente&lt;/h2&gt;
&lt;p&gt;Ahora que hemos liberado el espacio, podemos comprobar nuevamente el tamaño de la carpeta que apt usa para almacenar todos los archivos como caché:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;du -hs /var/cache/apt/archives
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;NOTA: la imagen de esta publicación es una vaca, sí una vaca en arte ASCII que podemos ver lanzando el comando:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apt-get moo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Es un &lt;a href=&quot;https://es.wikipedia.org/wiki/Huevo_de_pascua_(virtual)&quot;&gt;Easter Egg virtual&lt;/a&gt; que los desarrolladores de apt han incluido en el programa.&lt;/p&gt;

&lt;p&gt;A nadie le cae mal liberar espacio en disco de vez en cuando, hasta aquí con este pequeño tutorial, hasta la próxima.&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Aug 2017 02:00:07 -0500</pubDate>
        <link>http://localhost:4000/monsterpenguin/linux/2017/08/27/liberando-espacio-con-apt.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/linux/2017/08/27/liberando-espacio-con-apt.html</guid>
        
        <category>linux</category>
        
        <category>bash</category>
        
        <category>apt</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Mpsyt - youtube en la terminal</title>
        <description>&lt;p&gt;En lo personal encuentro mayor comodidad, simpleza y velocidad el realizar varias tareas en la terminal que se realizan habitualmente con programas con interfaz gráfica &lt;a href=&quot;https://es.wikipedia.org/wiki/Interfaz_gr%C3%A1fica_de_usuario&quot;&gt;GUI&lt;/a&gt;, muchos usuarios piensan que usar la terminal no es para ellos porque creen que la terminal es complicada de aprender, este punto puede llegar a ser muy subjetivo, y solo diré que:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Si te predispones a que algo es difícil de aprender o lograr, porque nunca lo haz hecho o porque es diferente a lo que estás acostumbrado a hacer, eso es lo que será: &lt;strong&gt;difícil para ti&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Una vez que se le agarra un poco el hilo a la terminal, la línea de comandos es fabulosa, poderosa y jamás querrás apartarte de ella, jaja ya sé: suena romántico, muchos me entenderán; Tareas como copiar-borrar-mover archivos o carpetas desde la terminal puede llegar a parecer trivial para muchos que ya se mueven en la terminal como peces en el agua, pero realizar conexiones ssh, abrir tu editor favorito dentro de la terminal como vim y programar en tus lenguajes favoritos, instalar programas adicionales o plugins, lanzar scripts, controlar servicios y daemons, dominar el lenguaje y sintaxis de bash, ksh, csh, tener a disposición y saber usar infinidad de comandos que cumplen la &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;Filosofía Unix&lt;/a&gt; comunicandose entre si por medio de pipes, son cosas que por supuesto no llegan a ser triviales para la mayoría, estas son tareas que con practica se vuelven más sencillas pero requiere su tiempo y esfuerzo aprenderlas, pero qué hay de aquellas otras cosas que hacemos sin esfuerzo alguno como puede ser &lt;strong&gt;reproducir música&lt;/strong&gt;, esta tarea no es algo que no podamos lograr dentro de la terminal con menor esfuerzo y algunas ventajas (como dije la terminal es poderosa y nos llega a facilitar las tareas menos inesperadas, las que creiamos que solo con programas con GUI se podían hacer), es por eso que después de esta introducción honorífica a la terminal, en esta ocasión quiero hablarles acerca de este programa mps-youtube (conocido también como mpsyt) un programa que nos va a permitir escuchar y descargar el audio de videos de youtube, incluso abrir el video con un reproductor, todo esto desde la terminal:&lt;/p&gt;

&lt;p&gt;Las características de mps-youtube son:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Búsqueda y reproducción de audio/video de youtube&lt;/li&gt;
  &lt;li&gt;Búsqueda de canciones de álbumes por título del álbum&lt;/li&gt;
  &lt;li&gt;Búsqueda e importación de playlist de youtube&lt;/li&gt;
  &lt;li&gt;Crear y guardar playlist locales&lt;/li&gt;
  &lt;li&gt;Descargar audio/video&lt;/li&gt;
  &lt;li&gt;Conversión a mp3 y otros formatos (requiere ffmpeg y avconv)&lt;/li&gt;
  &lt;li&gt;Ver los comentarios del video&lt;/li&gt;
  &lt;li&gt;Funciona con Python 3.x&lt;/li&gt;
  &lt;li&gt;Funciona con Windows, Linux and Mac OS X&lt;/li&gt;
  &lt;li&gt;Requiere mplayer o mpv&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una característica importante que no mencionan “creo imaginarme el por qué” y que he notado es que al escuchar la música desde mps-youtube no pasan los anuncios molestos, pero shhh ;)&lt;/p&gt;

&lt;p&gt;Hay que mencionar que este programa está basado en &lt;a href=&quot;https://github.com/np1/mps&quot;&gt;mps&lt;/a&gt; un programa para la terminal para stream y descarga de videos, en cambio mps-youtube es especializado para youtube utiliza el servicio de youtube como fuente directa.&lt;/p&gt;

&lt;p&gt;Mps-youtube se instala con un solo comando y en su repo oficial nos indican cómo instalarlo de la siguiente manera:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo pip3 install mps-youtube
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Una vez instalado lo lanzamos con:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mpsty
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Para finalizar dejaré la sección help y algunos controles (shortcuts) para movernos dentro del programa.&lt;/p&gt;

&lt;p&gt;Al entrar en modo prompt o consola:&lt;br /&gt;
  Help Topics&lt;/p&gt;

&lt;p&gt;Enter help &amp;lt;topic&amp;gt; for specific help:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;basic      : Basics&lt;/li&gt;
  &lt;li&gt;search     : Searching and Retrieving&lt;/li&gt;
  &lt;li&gt;edit       : Editing / Manipulating Results&lt;/li&gt;
  &lt;li&gt;download   : Downloading and Playback&lt;/li&gt;
  &lt;li&gt;dl-command : Downloading Using External Application&lt;/li&gt;
  &lt;li&gt;encode     : Encoding to MP3 and other formats&lt;/li&gt;
  &lt;li&gt;playlists  : Using Local Playlists&lt;/li&gt;
  &lt;li&gt;history    : Accessing Local History&lt;/li&gt;
  &lt;li&gt;invoke     : Invocation Parameters&lt;/li&gt;
  &lt;li&gt;config     : Configuration Options&lt;/li&gt;
  &lt;li&gt;tips       : Advanced Tips&lt;/li&gt;
  &lt;li&gt;new        : New Features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En modo reproducción&lt;br /&gt;
    [&amp;lt;] Track anterior&lt;br /&gt;
    [&amp;gt;] Track siguiente&lt;br /&gt;
    [9] y [0] Subir y bajar volumen&lt;br /&gt;
    [q] retroceder (salir o volver al menú anterior) &lt;br /&gt;
    [↓] [↑] Retroceder track y avanzar track&lt;br /&gt;
    [space] pause&lt;/p&gt;

&lt;p&gt;Internamente tengo entendido que mps-youtube utiliza youtube-dl y la gente de mps-youtube recomienda tenerlo instalado, youtube-dl es otra herramienta interesante de la cual muy probablemente hablaré en otra ocasión, hasta la próxima…&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Aug 2017 01:00:07 -0500</pubDate>
        <link>http://localhost:4000/monsterpenguin/linux/2017/08/26/mpsyt-youtube-en-la-terminal.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/linux/2017/08/26/mpsyt-youtube-en-la-terminal.html</guid>
        
        <category>linux</category>
        
        <category>bash</category>
        
        <category>terminal</category>
        
        <category>youtube</category>
        
        <category>music</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Variables de entorno Bash en GNU/Linux (export, printenv, env y el archivo .bashrc)</title>
        <description>&lt;h2 id=&quot;variables-de-entorno&quot;&gt;Variables de entorno&lt;/h2&gt;

&lt;p&gt;Las variables del entorno, también conocidas como variables del sistema son valores almacenados en memoria de los que el sistema operativo puede hacer uso para múltiples tareas, en esta publicación hablaré de estas variables y cómo consultarlas y modificarlas desde la shell, además hablaré de comandos que tienen relación con este tema de las variables de entorno.&lt;/p&gt;

&lt;p&gt;Las variables de entorno son un tema interesante y muy útil; Es común para los administradores de sistemas o programadores verse en la necesidad de cambiar por ejemplo la variable de entorno $PATH para apuntar a ejecutables, bibliotecas, frameworks, del sistema; Son necesarias cuando consultamos datos sobre la shell, cuando usamos compiladores, IDEs, instalando algun software, corriendo un script o intérprete, sin fin de cosas es donde podemos necesitarlas, es por ello que es importante al menos saber cómo consultarlas y definirlas.&lt;/p&gt;

&lt;p&gt;En GNU/Linux y sistemas Unix-like con sintaxis &lt;a href=&quot;https://es.wikipedia.org/wiki/Bash&quot;&gt;Bash&lt;/a&gt; podemos modificar y consultar las variables de entorno de manera simple, la mayoría de las distribuciones GNU/Linux tienen bash como lenguaje para la shell por default, los sistemas MAC OS X también cuentan con bash como lenguaje en sus terminales y podemos usar el comando &lt;strong&gt;echo&lt;/strong&gt; para ver las variables bash definidas:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;presionamos la tecla tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Al presionar la tecla &lt;strong&gt;&amp;lt;tab&amp;gt;&lt;/strong&gt; sirve para autocompletar palabras en la terminal, ella nos mostrará todas las variables de nuestro entorno auto-completando, y sabemos que en bash las variables comienzan con el signo &lt;strong&gt;$&lt;/strong&gt;, es por ello que al auto-completar con &lt;strong&gt;&amp;lt;tab&amp;gt;&lt;/strong&gt; veremos una lista más extensa de variables pero parecida a la siguiente:&lt;/p&gt;

&lt;p&gt;(la siguiente lista es una lista reducida y específica de bash)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$BASH_ALIASES&lt;/li&gt;
  &lt;li&gt;$BASH_ARGC&lt;/li&gt;
  &lt;li&gt;$BASH_ARGV&lt;/li&gt;
  &lt;li&gt;$BASH_CMDS&lt;/li&gt;
  &lt;li&gt;$BASH_COMMAND&lt;/li&gt;
  &lt;li&gt;$BASH_COMPLETION_COMPAT_DIR&lt;/li&gt;
  &lt;li&gt;$BASH_LINENO&lt;/li&gt;
  &lt;li&gt;$BASHOPTS&lt;/li&gt;
  &lt;li&gt;$BASHPID&lt;/li&gt;
  &lt;li&gt;$BASH_REMATCH&lt;/li&gt;
  &lt;li&gt;$BASH_SOURCE&lt;/li&gt;
  &lt;li&gt;$BASH_SUBSHELL&lt;/li&gt;
  &lt;li&gt;$BASH_VERSINFO&lt;/li&gt;
  &lt;li&gt;$BASH_VERSION (versión del bash)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Posiblemente las variables más “populares” dentro de los sistemas Unix-like con y sin bash sean:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$PATH (variable que tiene rutas a binarios, separadas por ‘:’)&lt;/li&gt;
  &lt;li&gt;$BASH (ruta al programa bash que interpreta órdenes y el lenguaje para la shell llamado bash)&lt;/li&gt;
  &lt;li&gt;$DISPLAY (lista de las pantallas del servidor X)&lt;/li&gt;
  &lt;li&gt;$EDITOR (el editor predeterminado: vim, emacs, nano, etc)&lt;/li&gt;
  &lt;li&gt;$HISTFILE (ruta al archivo historial de comandos, normalmente: ~/.bash_history)&lt;/li&gt;
  &lt;li&gt;$HISTSIZE (numero max de comandos del historial para el archivo definido en $HISTFILE)&lt;/li&gt;
  &lt;li&gt;$HOME (la variable $HOME tiene la ruta a nuestra carpeta de usuario)&lt;/li&gt;
  &lt;li&gt;$HOSTNAME (nombre de la máquina)&lt;/li&gt;
  &lt;li&gt;$IGNOREEOF (número de veces que hay que pulsar ctrl+d para prevenir salir de la terminal por accidente, es recomendable IGNOREEOF=2 con esto es necesario pulsar ctrl+d dos veces para salir)&lt;/li&gt;
  &lt;li&gt;$PATH (variable con rutas a binarios, en esta publicación hablo bastante sobre ella)&lt;/li&gt;
  &lt;li&gt;$PS1 (variable que define como se muestra nuestro prompt, precisamente el carácter o los caracteres que se ven detrás del cursor en la línea de comandos, por default en bash es ‘$’)&lt;/li&gt;
  &lt;li&gt;$SHELL (el intérprete de comandos por default)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Notemos que la mayoría de variables de entorno están definidas con letras mayúsculas por convención.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para ver el valor definido en una variable de entorno en particular, por ejemplo &lt;em&gt;$HOME&lt;/em&gt; basta con hacer un &lt;strong&gt;echo&lt;/strong&gt; de la siguiente manera:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;/home/monsterpenguin
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Donde mosnterpenguin es el user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Podemos observar que definir y consultar variables es sencillo y aún más sencillo con el comando: &lt;strong&gt;printenv&lt;/strong&gt; ya que nos permite ver &lt;strong&gt;todas&lt;/strong&gt; las variables y sus valores rápidamente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;printenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;De la misma manera  el comando &lt;strong&gt;env&lt;/strong&gt; puede mostrarnos las variables de entorno y también nos permite ejecutar un programa con variables de entorno modificadas (podría decirse en un enviroment controlado en cuanto a variables de entorno), esta publicación tiene un apartado explicando el uso de env con mayor detalle más adelante.&lt;/p&gt;

&lt;h2 id=&quot;la-famosa-variable-path&quot;&gt;La famosa variable $PATH&lt;/h2&gt;
&lt;p&gt;La variable de entorno $PATH existe en la mayoría de los sistemas operativos, su función es tener rutas donde se alojan los programas para que el usuario y otros comandos o programas los encuentren con facilidad, si no existiera esta variable de entorno para ejecutar el comando ‘ls’ por ejemplo, sería necesario escribir su ruta completa &lt;strong&gt;‘/bin/ls’&lt;/strong&gt; y el punto para ejecutarlo:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;which ls
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;/bin/ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Con la variable $PATH nos aseguramos que en la variedad de sistemas existentes, esta variable tendrá las rutas importantes a los programas e intérpretes.&lt;/p&gt;

&lt;p&gt;¿ Qué pasa con la variable $PATH ?&lt;br /&gt;
La variable $PATH digamos que está definida de una manera “especial” y utiliza una notación con &lt;strong&gt;’:’&lt;/strong&gt; para separar rutas (lo explicaré enseguida) a diferencia de $HOME , y lo que almacena esta variable como mencione anteriormente son rutas a programas del sistema y además podemos hacer que apunte a una carpeta o varias carpetas donde tengamos nuestros propios programas, y esto sirve para que al escribir el nombre de alguno de nuestros programas en la terminal ella sepa donde encontrarlo y ejecutarlo.&lt;/p&gt;

&lt;p&gt;$PATH por default tendrá una cadena (valor) algo parecido a esto:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo $PATH
&amp;gt; /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;En la cadena anterior tenemos varias rutas separadas por &lt;strong&gt;’:’&lt;/strong&gt; rutas a ejecutables dentro del directorio del usuario &lt;strong&gt;‘/usr/bin’&lt;/strong&gt; y del sistema &lt;strong&gt;‘/sbin/bin’&lt;/strong&gt; y si quisiéramos agregar otro directorio bastaría con definir la variable PATH agregando &lt;strong&gt;‘/ruta/a/mis/programas’&lt;/strong&gt; y concatenando la cadena actual del $PATH de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/ruta/a/mis/programas:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Con el comando anterior nuestra cadena (valor) de $PATH sería:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo $PATH
&amp;gt; /ruta/a/mis/programas:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;El orden en el que definimos las rutas dentro de $PATH &lt;strong&gt;es importante&lt;/strong&gt;, ya que el sistema consulta las rutas de $PATH de izquierda a derecha y una vez que ha encontrado el binario/ejecutable dentro de un directorio, el sistema deja de buscar en los directorios que se encuentran más a la derecha de la cadena del $PATH. Supongamos que el sistema tiene el &lt;em&gt;programaX&lt;/em&gt; dentro de &lt;em&gt;/sbin/bin&lt;/em&gt; y nosotros tenemos el mismo &lt;em&gt;programaX&lt;/em&gt; dentro de &lt;em&gt;/ruta/a/mis/programas&lt;/em&gt; y la variable $PATH fue definida así:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/ruta/a/mis/programas
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Entonces la cadena del $PATH sería:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo $PATH
&amp;gt; /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/ruta/a/mis/programas
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Al escribir en la terminal:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;programaX
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;El sistema buscará el &lt;strong&gt;programaX&lt;/strong&gt; en las rutas del $PATH y si el sistema primero encuentra un programa con el nombre &lt;strong&gt;programaX&lt;/strong&gt; especificado en las rutas del sistema, ese binario será el ejecutado y no el que se encuentre dentro de &lt;strong&gt;‘/ruta/a/mis/programas’&lt;/strong&gt;, esto representaría un problema si las versiones del &lt;strong&gt;programaX&lt;/strong&gt; fuesen distintas, en el tema sobre el comando &lt;strong&gt;env&lt;/strong&gt; muestro un ejemplo de esto.&lt;/p&gt;

&lt;h2 id=&quot;el-comando-export&quot;&gt;El comando export&lt;/h2&gt;
&lt;p&gt;Quizá te preguntaste: ¿ para qué sirve &lt;strong&gt;export PATH&lt;/strong&gt; ?&lt;br /&gt;
El comando export se utiliza para exportar variables, cuando nosotros ejecutamos un programa todas las variables del entorno exportadas son heredadas a los procesos hijos y ellos pueden acceder a ellas.&lt;/p&gt;

&lt;p&gt;Si nosotros definimos una nueva variable llamada FOO:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FOO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Y si no hacemos un &lt;strong&gt;export FOO&lt;/strong&gt; los procesos hijos no podrán acceder al valor de FOO.&lt;/p&gt;

&lt;h2 id=&quot;el-comando-env&quot;&gt;El comando env&lt;/h2&gt;
&lt;p&gt;Si estamos hablando de variables de entorno también vale la pena hablar del comando &lt;strong&gt;env&lt;/strong&gt;, este comando puede jugar un papel importante en el mundo de las variables de entorno, y para simplificarlo este comando hace dos cosas principalmente:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Muestra las variables de entorno al igual que el comando &lt;strong&gt;printenv&lt;/strong&gt; simplemente llamándolo sin opciones y argumentos:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ env
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Ejecutar un comando o script añadiendo o eliminando variables de entorno. El siguiente comando muestra cómo se puede definir la variable $PATH para el nuevo entorno/contexto a generar con env
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;env &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/mi/nuevo/path /bin/bash
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Para ejecutar por ejemplo una nueva shell ignorando las variables de entorno actuales y definiendo un PATH con una nueva ruta adicional:&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;env -i &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/mi/ruta/adicional /bin/sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;La opción &lt;em&gt;-i&lt;/em&gt; en el comando anterior nos permite ignorar las variables de entorno actuales pero aun así definir también $PATH, para más información ver el manual de env&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;man env
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Env a menudo es utilizado para asegurar que se lance el intérprete correcto para un script, el siguiente ejemplo lo encontré en stackoverflow y muestra cómo podemos asegurarnos de utilizar el intérprete correcto:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;/usr/local/bin/python -V
Python 2.6.4
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;/usr/bin/python -V
Python 2.5.1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat my_script.py
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
import json
print &lt;span class=&quot;s2&quot;&gt;&quot;hello, json&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin:/usr/bin
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./my_script.py
hello, json
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin:/usr/local/bin
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./my_script.py
Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  File &lt;span class=&quot;s2&quot;&gt;&quot;./my_script.py&quot;&lt;/span&gt;, line 2, &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
      import json
      ImportError: No module named json
&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Credito y fuente del ejemplo anterior &lt;a href=&quot;https://stackoverflow.com/questions/2429511/why-do-people-write-usr-bin-env-python-on-the-first-line-of-a-python-script&quot;&gt;aquí&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El ejemplo anterior nos muestra que hay dos intérpretes de python (dos programas distintos en rutas distintas, con versiones distintas) y damos por hecho dos cosas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;python 2.5 se encuentra en la ruta &lt;em&gt;/usr/bin&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;python 2.6 se encuentra en la ruta &lt;em&gt;/usr/local/bin&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Otro hecho importante y la moraleja de esto es que la primera línea de &lt;strong&gt;my_script.py&lt;/strong&gt; “La apodada &lt;a href=&quot;https://es.wikipedia.org/wiki/Shebang&quot;&gt;Shebang #!&lt;/a&gt;” manda a llamar un interprete de python por medio de nuestro comando &lt;strong&gt;env&lt;/strong&gt;, asegurando así que el intérprete a llamar será el que se encuentre primero en la variable $PATH del entorno actual, y al ser cambiado el orden de la definición del $PATH cambia el resultado de correr &lt;strong&gt;my_scriopt.py&lt;/strong&gt; puesto que la versión 2.5 de python nos arroja un &lt;strong&gt;ImportError&lt;/strong&gt; ya que esa versión en ese sistema no cuenta con el módulo &lt;em&gt;json&lt;/em&gt; instalado y necesita ser instalado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recuerda:&lt;/strong&gt; el orden del la definición de directorios en el $PATH es importante como en el caso anterior.&lt;/p&gt;

&lt;h2 id=&quot;el-archivo-bashrc&quot;&gt;El archivo .bashrc&lt;/h2&gt;
&lt;p&gt;El archivo .bashrc es un archivo que es ejecutado cuando iniciamos una sesión en bash, abriendo por ejemplo la terminal (los MACOSX también cuentan con un .bash_profile). Entonces la idea aquí con las variables de entorno y el .bashrc es definir variables del entorno como $PATH* en nuestro archivo de inicio &lt;strong&gt;.bashrc&lt;/strong&gt;, esto quiere decir que: Cada vez que iniciemos un bash shell dentro del sistema y en el espacio del usuario, la variable $PATH tendrá un valor ya definido por default que el usuario quiera, con esto evitamos que tener que definir la variable $PATH de manera manual cada vez que abramos la terminal, para lograr esto solo hay que agregar las siguientes líneas a nuestro archivo bashrc:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/ruta/a/mis/programas:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;El archivo &lt;strong&gt;.bashrc&lt;/strong&gt; está oculto, es por ello que su nombre comienza con un punto ‘.’ es la manera en que los sistemas Unix-like marcan/definen archivos ocultos; El archivo &lt;strong&gt;.bashrc&lt;/strong&gt; lo encontramos dentro de la carpeta HOME de cada usuario que use bash como lenguaje shell para su sesión, los archivos ocultos que definen configuraciones específicas del usuario en distintas aplicaciones son llamados en conjunto &lt;a href=&quot;https://en.wikipedia.org/wiki/Dot-file&quot;&gt;dotfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En mi repo &lt;a href=&quot;https://github.com/Energy1011/dotfiles/blob/master/.bashrc&quot;&gt;dotfiles&lt;/a&gt; tengo además un par de scripts para instalar/respaldar mis dotfiles, sean libres de descargarlo, modificarlo y adaptarlo a su gusto.&lt;/p&gt;

&lt;p&gt;Espero esta publicación les sea de utilidad, hasta la próxima.&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Aug 2017 14:09:11 -0500</pubDate>
        <link>http://localhost:4000/monsterpenguin/linux/2017/08/25/variables-de-entorno.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/linux/2017/08/25/variables-de-entorno.html</guid>
        
        <category>linux</category>
        
        <category>bash</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>MPSC01 - Software Libre, Libreoffice, Writer</title>
        <description>&lt;p&gt;En este screencast hablo sobre el software libre y lo sencillo que es utilizar writer para dar formato al texto y agregar imagenes, etc.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Aug 2017 12:32:00 -0500</pubDate>
        <link>http://localhost:4000/monsterpenguin/screencast/news/2017/08/17/screencast-software-libreoffice.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/screencast/news/2017/08/17/screencast-software-libreoffice.html</guid>
        
        <category>sl</category>
        
        <category>linux</category>
        
        <category>writer</category>
        
        
        <category>screencast</category>
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Maratón Linuxero día 3 de septiembre 2017</title>
        <description>&lt;h2 id=&quot;maratón-linuxero&quot;&gt;Maratón Linuxero&lt;/h2&gt;
&lt;p&gt;Si algo caracteriza a la comunidad de &lt;strong&gt;GNU/Linux&lt;/strong&gt; la también llamada &lt;strong&gt;Linuxfera&lt;/strong&gt;, son sus estupendos aportes a lo largo y ancho de todo el ciberespacio, no hay fronteras o limitaciones cuando de compartir se trata y en esta ocasión personas de la comunidad (No sólo están colaborado podcasters, sino también , administradores de sistema, desarrolladores, diseñadores y artistas para realizar el blog, servicios, carteles, promos y vídeos del proyecto). Todos ellos se han organizado para emitir un &lt;strong&gt;Maratón Linuxero&lt;/strong&gt; que al parecer no tendrá precedentes en toda la comunidad de habla hispana; A continuación invito a todos ustedes eschuchar el promo y a leer la nota de prensa de la página &lt;a href=&quot;https://maratonlinuxero.github.io/&quot;&gt;https://maratonlinuxero.github.io/&lt;/a&gt; que los organizadores han compartido:&lt;/p&gt;
&lt;video src=&quot;https://maratonlinuxero.github.io/images/Promo%20Marat%C3%B3n%20Linuxero2.mp4&quot; controls=&quot;&quot; preload=&quot;&quot; width=&quot;540&quot; height=&quot;480&quot;&gt;&lt;/video&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTA DE PRENSA MARATÓN LINUXERO&lt;/strong&gt;&lt;br /&gt;
Con motivo de la gran aceptación del sistema operativo GNU/Linux por parte de cada vez más
usuarios, y para celebrar un evento de divulgación y conocimiento del mismo en habla hispana, la
organización del “Maratón  Linuxero” emitirá  un  podcast  en streaming  accesible  desde  varias
plataformas.&lt;br /&gt;
Este evento tendrá lugar el próximo domingo 3 de septiembre de 15:00 a 24:00 horas
(hora España UTC+2), a través de los siguientes canales y plataformas online:&lt;br /&gt;
YouTube:&lt;a href=&quot;https://www.youtube.com/maratonlinuxero&quot;&gt;https://www.youtube.com/maratonlinuxero&lt;/a&gt;&lt;br /&gt;
RadioMaratón:&lt;a href=&quot;https://compilando.audio/index.php/radiomaraton/&quot;&gt;https://compilando.audio/index.php/radiomaraton/&lt;/a&gt;&lt;br /&gt;
El contenido del podcast será variado y a lo largo de 9 horas se tratarán temas relacionados exclusivamente con el mundo GNU/Linux y Software Libre
La parrilla de directos será la siguiente:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;15:00 Bienvenida y Podcast Linux&lt;/li&gt;
    &lt;li&gt;16:00 Eduardo Collado&lt;/li&gt;
    &lt;li&gt;17:00 Yoyo Fernández y amigos&lt;/li&gt;
    &lt;li&gt;18:00 José GDF y Dj Mao Mix&lt;/li&gt;
    &lt;li&gt;19:00 KDE España Podcast&lt;/li&gt;
    &lt;li&gt;20:00 Ubuntu y otras hierbas&lt;/li&gt;
    &lt;li&gt;21:00 Ugeek y Mosquetero Web&lt;/li&gt;
    &lt;li&gt;22:00 NeoRanger y Enderhe.&lt;/li&gt;
    &lt;li&gt;23:00 Paco Estrada&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Podemos ver la nota completa &lt;a href=&quot;https://maratonlinuxero.github.io/images/NotaPrensa.pdf&quot;&gt;aquí&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;en-el-maratón-mencionan-que-también-habrá-sorteos&quot;&gt;En el Maratón mencionan que también habrá sorteos&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Para animar el directo y gracias a &lt;a href=&quot;https://www.pcubuntu.es/&quot;&gt;PCUbuntu&lt;/a&gt;, &lt;a href=&quot;http://www.vantpc.es/&quot;&gt;Vant&lt;/a&gt; y &lt;a href=&quot;https://slimbook.es/&quot;&gt;Slimbook&lt;/a&gt; nos alegra compartir con todos los oyentes los sorteos que vamos a realizar en el Maratón Linuxero.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Los temas a tratar serán definidos dentro de poco, y quiero decir que sin duda serán interesantes para toda la comunidad, soy oyente de podcasts y lector de blogs de las personas aquí involucradas y participantes, así que garantizo que será interesante. De mi persona solo queda agradecer a todas y todos, que hacen posible está gran difusión y por último no me queda más que invitarlos a disfrutar de este próximo Maratón Linuxero que no nos podemos perder, saludos :)&lt;/p&gt;

&lt;h2 id=&quot;para-más-información-y-formas-de-contacto&quot;&gt;Para más información y formas de contacto:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Blog: &lt;a href=&quot;https://maratonlinuxero.github.io/&quot;&gt;https://maratonlinuxero.github.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Telegram: &lt;a href=&quot;https://t.me/maratonlinuxero&quot;&gt;https://t.me/maratonlinuxero&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/maratonlinuxero&quot;&gt;https://twitter.com/maratonlinuxero&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Correo: maratonlinuxero@gmail.com&lt;/li&gt;
  &lt;li&gt;Youtube: &lt;a href=&quot;https://www.youtube.com/maratonlinuxero&quot;&gt;https://www.youtube.com/maratonlinuxero&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Radio Maratón: &lt;a href=&quot;http://www.radiomaraton.ml&quot;&gt;http://www.radiomaraton.ml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Feed Podcast Maratón Linuxero: &lt;a href=&quot;http://maratonlinuxero.github.io/feed.xml&quot;&gt;http://maratonlinuxero.github.io/feed.xml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Audios en Archive.org: &lt;a href=&quot;https://archive.org/details/@maratonlinuxero&quot;&gt;https://archive.org/details/@maratonlinuxero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 17 Aug 2017 12:32:00 -0500</pubDate>
        <link>http://localhost:4000/monsterpenguin/post/news/2017/08/17/maraton-linuxero-sep-3-2017.html</link>
        <guid isPermaLink="true">http://localhost:4000/monsterpenguin/post/news/2017/08/17/maraton-linuxero-sep-3-2017.html</guid>
        
        <category>maraton</category>
        
        <category>linux</category>
        
        <category>misc</category>
        
        
        <category>post</category>
        
        <category>news</category>
        
      </item>
    
  </channel>
</rss>
